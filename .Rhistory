stroke_ds$gender <-  ifelse(stroke_ds$gender == "Male", 1, ifelse(stroke_ds$gender == "Female", 0, NA))
missing_value_row_gender <- which(is.na(stroke_ds$gender))
cat("Row number of missing value in gender is: ", missing_value_row_gender, "\n")
mode_gender <- as.numeric(names(sort(table(stroke_ds$gender), decreasing = TRUE)[1]))
stroke_ds$gender[is.na(stroke_ds$gender)] <- mode_gender
age_outliers <- boxplot(stroke_ds$age, main = "Boxplot for age attribute", ylab = "Age")$out
cat("Potentials outliers on age attribute are: ", age_outliers, "\n")
stroke_ds$bmi[stroke_ds$bmi == "N/A"] <- NA
bmi_missing_value_rows <- which(is.na(stroke_ds$bmi))
cat("Potential rows of missing value in BMI: ", bmi_missing_value_rows, "\n")
mode_bmi <- as.numeric(names(sort(table(stroke_ds$bmi), decreasing = TRUE)[1]))
stroke_ds$bmi <- as.numeric(as.character(stroke_ds$bmi))
stroke_ds$bmi[is.na(stroke_ds$bmi)] <- mode_bmi
bmi_outliers <- boxplot(stroke_ds$bmi, main = "Boxplot for BMI column", ylab = "BMI")$out
cat("Potential outliers of BMI column: ", bmi_outliers, "\n")
bmi_outliers_rows <- which(stroke_ds$bmi < 0 | stroke_ds$bmi > 47 | stroke_ds$bmi < 15)
cat("Potetial rows of outliers of BMI column: ", bmi_outliers_rows, "\n")
for (i in 1:length(stroke_ds$bmi)){
if (stroke_ds$bmi[i] < 0 | stroke_ds$bmi[i] > 40 | stroke_ds$bmi[i] < 15){
stroke_ds$bmi[i] <- mode_bmi
}
}
mode_smoking_status <- names(sort(table(stroke_ds$smoking_status), decreasing = TRUE))[1]
mode_smoking_status
stroke_ds$smoking_status[stroke_ds$smoking_status == "Unknown"] <- mode_smoking_status
age_ranges <- c(0, 18, 35, 50, Inf)
age_labels <- c("Children", "Adult", "Middle Age Adult", "Senior Adult")
stroke_ds$age <- cut(stroke_ds$age, breaks = age_ranges, labels = age_labels, include.lowest = TRUE, right = FALSE)
bmi_range <- c(-Inf, 18.5, 24.9, 29.9, Inf)
bmi_labels <- c("Underweight", "Normal Weight", "Overweight", "Obese")
stroke_ds$bmi <- cut(stroke_ds$bmi, breaks = bmi_range, labels = bmi_labels, include.lowest = TRUE)
# Id column
contingency_table_id <- table(stroke_ds$stroke, stroke_ds$id)
chi_square_result_id <- chisq.test(contingency_table_id)
print(chi_square_result_id)
# Gender column
contingency_table_gender <- table(stroke_ds$stroke, stroke_ds$gender)
chi_square_result_gender <- chisq.test(contingency_table_gender)
print(chi_square_result_gender)
# age column (ok)
contingency_table_age <- table(stroke_ds$stroke, stroke_ds$age)
chi_square_result_age <- chisq.test(contingency_table_age)
print(chi_square_result_age)
# Hypertension column (ok)
contingency_table_hypertension <- table(stroke_ds$stroke, stroke_ds$hypertension)
chi_square_result_hypertension <- chisq.test(contingency_table_hypertension)
print(chi_square_result_hypertension)
# heart disease column (ok)
contingency_table_heart_disease <- table(stroke_ds$stroke, stroke_ds$heart_disease)
chi_square_result_heart_disease <- chisq.test(contingency_table_heart_disease)
print(chi_square_result_heart_disease)
# ever married column (ok)
contingency_table_ever_married <- table(stroke_ds$stroke, stroke_ds$ever_married)
chi_square_result_ever_married <- chisq.test(contingency_table_ever_married)
print(chi_square_result_ever_married)
# work type column (ok)
contingency_table_work_type <- table(stroke_ds$stroke, stroke_ds$work_type)
chi_square_result_work_type <- chisq.test(contingency_table_work_type)
print(chi_square_result_work_type)
# Residence type column
contingency_table_residence_type <- table(stroke_ds$stroke, stroke_ds$Residence_type)
chi_square_result_residence_type <- chisq.test(contingency_table_residence_type)
print(chi_square_result_residence_type)
# Bmi column (ok)
contingency_table_bmi <- table(stroke_ds$stroke, stroke_ds$bmi)
chi_square_result_bmi <- chisq.test(contingency_table_bmi)
print(chi_square_result_bmi)
# Smoking status column (ok)
contingency_table_smoking_status <- table(stroke_ds$stroke, stroke_ds$smoking_status)
chi_square_result_smoking_status <- chisq.test(contingency_table_smoking_status)
print(chi_square_result_smoking_status)
columns_to_remove <- c("avg_glucose_level", "gender", "id")
stroke_data <- stroke_data[, !(names(stroke_data) %in% columns_to_remove)]
bmi_outliers <- boxplot(stroke_ds$bmi, main = "Boxplot for BMI column", ylab = "BMI")$out
cat("Potential outliers of BMI column: ", bmi_outliers, "\n")
columns_to_remove <- c("gender", "id")
stroke_ds <- stroke_ds[, !(names(stroke_ds) %in% columns_to_remove)]
names(stroke_ds)
install.packages(c("caret", "e1071"))
library(caret)
library(e1071)
ctrl <- trainControl(method = "cv", number = 10, savePredictions = TRUE, classProbs = TRUE)
nb_model <- train(stroke ~ ., data = stroke_ds, method = "naive_bayes", trControl = ctrl)
nb_model <- train(stroke ~ ., data = stroke_ds, method = "naive_bayes", trControl = ctrl)
print(nb_model)
stroke_ds$stroke <-  ifelse(stroke_ds$stroke == 1, "Yes", ifelse(stroke_ds$stroke == 0, "No", NA))
ctrl <- trainControl(method = "cv", number = 10, savePredictions = TRUE, classProbs = TRUE)
nb_model <- train(stroke ~ ., data = stroke_ds, method = "naive_bayes", trControl = ctrl)
print(nb_model)
stroke_ds <- read.csv("E:/Courses/AIUB Courses/9th Semester/Introduction to data science/Final Term/Strock Prediction Project/stroke_ds.csv")
head(stroke_ds)
tail(stroke_ds)
str(stroke_ds)
summary(stroke_ds)
colSums(is.na(stroke_ds))
names(stroke_ds)
is.na(stroke_ds)
dim(stroke_ds)
stroke_ds$gender <-  ifelse(stroke_ds$gender == "Male", 1, ifelse(stroke_ds$gender == "Female", 0, NA))
missing_value_row_gender <- which(is.na(stroke_ds$gender))
cat("Row number of missing value in gender is: ", missing_value_row_gender, "\n")
mode_gender <- as.numeric(names(sort(table(stroke_ds$gender), decreasing = TRUE)[1]))
stroke_ds$gender[is.na(stroke_ds$gender)] <- mode_gender
age_outliers <- boxplot(stroke_ds$age, main = "Boxplot for age attribute", ylab = "Age")$out
cat("Potentials outliers on age attribute are: ", age_outliers, "\n")
stroke_ds$bmi[stroke_ds$bmi == "N/A"] <- NA
bmi_missing_value_rows <- which(is.na(stroke_ds$bmi))
cat("Potential rows of missing value in BMI: ", bmi_missing_value_rows, "\n")
mode_bmi <- as.numeric(names(sort(table(stroke_ds$bmi), decreasing = TRUE)[1]))
stroke_ds$bmi <- as.numeric(as.character(stroke_ds$bmi))
stroke_ds$bmi[is.na(stroke_ds$bmi)] <- mode_bmi
bmi_outliers <- boxplot(stroke_ds$bmi, main = "Boxplot for BMI column", ylab = "BMI")$out
cat("Potential outliers of BMI column: ", bmi_outliers, "\n")
bmi_outliers_rows <- which(stroke_ds$bmi < 0 | stroke_ds$bmi > 47 | stroke_ds$bmi < 15)
cat("Potetial rows of outliers of BMI column: ", bmi_outliers_rows, "\n")
for (i in 1:length(stroke_ds$bmi)){
if (stroke_ds$bmi[i] < 0 | stroke_ds$bmi[i] > 40 | stroke_ds$bmi[i] < 15){
stroke_ds$bmi[i] <- mode_bmi
}
}
mode_smoking_status <- names(sort(table(stroke_ds$smoking_status), decreasing = TRUE))[1]
mode_smoking_status
stroke_ds$smoking_status[stroke_ds$smoking_status == "Unknown"] <- mode_smoking_status
stroke_ds <- stroke_ds[, !(names(stroke_ds) %in% "avg_glucose_level")]
age_ranges <- c(0, 18, 35, 50, Inf)
age_labels <- c("Children", "Adult", "Middle Age Adult", "Senior Adult")
stroke_ds$age <- cut(stroke_ds$age, breaks = age_ranges, labels = age_labels, include.lowest = TRUE, right = FALSE)
bmi_range <- c(-Inf, 18.5, 24.9, 29.9, Inf)
bmi_labels <- c("Underweight", "Normal Weight", "Overweight", "Obese")
stroke_ds$bmi <- cut(stroke_ds$bmi, breaks = bmi_range, labels = bmi_labels, include.lowest = TRUE)
# Id column
contingency_table_id <- table(stroke_ds$stroke, stroke_ds$id)
chi_square_result_id <- chisq.test(contingency_table_id)
print(chi_square_result_id)
# Gender column
contingency_table_gender <- table(stroke_ds$stroke, stroke_ds$gender)
chi_square_result_gender <- chisq.test(contingency_table_gender)
print(chi_square_result_gender)
# age column (ok)
contingency_table_age <- table(stroke_ds$stroke, stroke_ds$age)
chi_square_result_age <- chisq.test(contingency_table_age)
print(chi_square_result_age)
# Hypertension column (ok)
contingency_table_hypertension <- table(stroke_ds$stroke, stroke_ds$hypertension)
chi_square_result_hypertension <- chisq.test(contingency_table_hypertension)
print(chi_square_result_hypertension)
# heart disease column (ok)
contingency_table_heart_disease <- table(stroke_ds$stroke, stroke_ds$heart_disease)
chi_square_result_heart_disease <- chisq.test(contingency_table_heart_disease)
print(chi_square_result_heart_disease)
# ever married column (ok)
contingency_table_ever_married <- table(stroke_ds$stroke, stroke_ds$ever_married)
chi_square_result_ever_married <- chisq.test(contingency_table_ever_married)
print(chi_square_result_ever_married)
# work type column (ok)
contingency_table_work_type <- table(stroke_ds$stroke, stroke_ds$work_type)
chi_square_result_work_type <- chisq.test(contingency_table_work_type)
print(chi_square_result_work_type)
# Residence type column
contingency_table_residence_type <- table(stroke_ds$stroke, stroke_ds$Residence_type)
chi_square_result_residence_type <- chisq.test(contingency_table_residence_type)
print(chi_square_result_residence_type)
# Bmi column (ok)
contingency_table_bmi <- table(stroke_ds$stroke, stroke_ds$bmi)
chi_square_result_bmi <- chisq.test(contingency_table_bmi)
print(chi_square_result_bmi)
# Smoking status column (ok)
contingency_table_smoking_status <- table(stroke_ds$stroke, stroke_ds$smoking_status)
chi_square_result_smoking_status <- chisq.test(contingency_table_smoking_status)
print(chi_square_result_smoking_status)
columns_to_remove <- c("gender", "id")
stroke_ds <- stroke_ds[, !(names(stroke_ds) %in% columns_to_remove)]
stroke_ds$stroke <-  ifelse(stroke_ds$stroke == 1, "Yes", ifelse(stroke_ds$stroke == 0, "No", NA))
bmi_outliers <- boxplot(stroke_ds$bmi, main = "Boxplot for BMI column", ylab = "BMI")$out
cat("Potential outliers of BMI column: ", bmi_outliers, "\n")
bmi_outliers_rows <- which(stroke_ds$bmi < 0 | stroke_ds$bmi > 47 | stroke_ds$bmi < 15)
cat(
dim(stroke_ds)
print(dim(stroke_ds))
Print(dim(stroke_ds))
Print(dim(stroke_ds))
dim(stroke_ds)
selected_attributes <- c("age", "hypertension", "heart_disease", "ever_married",
"work_type", "Residence_type", "bmi", "smoking_status", "stroke")
selected_data <- stroke_ds[, selected_attributes]
set.seed(123)
train_indices <- createDataPartition(selected_data$stroke, p = 0.7, list = FALSE)
train_data <- selected_data[train_indices, ]
test_data <- selected_data[-train_indices, ]
nb_model <- naiveBayes(stroke ~ ., data = train_data)
nb_pred <- predict(nb_model, newdata = test_data)
conf_matrix <- confusionMatrix(nb_pred, test_data$stroke)
conf_matrix <- confusionMatrix(nb_pred, test_data$stroke)
for (col in c("hypertension", "heart_disease", "ever_married", "work_type", "Residence_type", "smoking_status", "stroke")) {
train_data[[col]] <- as.factor(train_data[[col]])
test_data[[col]] <- factor(test_data[[col]], levels = levels(train_data[[col]]))
}
set.seed(123)
train_indices <- createDataPartition(selected_data$stroke, p = 0.7, list = FALSE)
train_data <- selected_data[train_indices, ]
test_data <- selected_data[-train_indices, ]
nb_model <- naiveBayes(stroke ~ ., data = train_data)
nb_pred <- predict(nb_model, newdata = test_data)
conf_matrix <- confusionMatrix(nb_pred, test_data$stroke)
conf_matrix <- confusionMatrix(nb_pred, test_data$stroke)
nb_pred <- predict(nb_model, newdata = test_data)
conf_matrix <- confusionMatrix(nb_pred, test_data$stroke)
accuracy <- conf_matrix$overall["Accuracy"]
install.packages(c("caret", "e1071"))
library(caret)
library(e1071)
install.packages(c("caret", "e1071"))
installed.packages()
install.packages(c("caret", "e1071"))
library(caret)
library(e1071)
install.packages(c("caret", "e1071"))
install.packages(c("caret", "e1071"))
install.packages(c("caret", "e1071"))
install.packages(c("caret", "e1071"))
install.packages(c("caret", "e1071"))
library(caret)
library(e1071)
selected_attributes <- c("age", "hypertension", "heart_disease", "ever_married",
"work_type", "Residence_type", "bmi", "smoking_status", "stroke")
selected_data <- stroke_ds[, selected_attributes]
set.seed(123)
train_indices <- createDataPartition(selected_data$stroke, p = 0.7, list = FALSE)
train_data <- selected_data[train_indices, ]
test_data <- selected_data[-train_indices, ]
for (col in c("hypertension", "heart_disease", "ever_married", "work_type", "Residence_type", "smoking_status", "stroke")) {
train_data[[col]] <- as.factor(train_data[[col]])
test_data[[col]] <- factor(test_data[[col]], levels = levels(train_data[[col]]))
}
nb_model <- naiveBayes(stroke ~ ., data = train_data)
# Make predictions on the test set
nb_pred <- predict(nb_model, newdata = test_data)
# Evaluate the model
conf_matrix <- confusionMatrix(nb_pred, test_data$stroke)
accuracy <- conf_matrix$overall["Accuracy"]
cat("Naïve Bayes Classification Results:\n")
cat("Accuracy:", accuracy, "\n")
cat("Confusion Matrix:\n")
print(conf_matrix)
nb_pred <- predict(nb_model, newdata = test_data)
cat("Naïve Bayes Classification Results:\n")
cat("Accuracy:", accuracy, "\n")
cat("Confusion Matrix:\n")
print(conf_matrix)
conf_matrix_split <- confusionMatrix(nb_pred_split, test_data$stroke)
nb_model_split <- naiveBayes(stroke ~ ., data = train_data)
nb_pred_split <- predict(nb_model_split, newdata = test_data)
conf_matrix_split <- confusionMatrix(nb_pred_split, test_data$stroke)
accuracy_split <- conf_matrix_split$overall["Accuracy"]
cat("Approach 1 - Data Splitting:\n")
cat("Accuracy:", accuracy_split, "\n")
cat("Confusion Matrix:\n")
print(conf_matrix_split)
ctrl <- trainControl(method = "cv", number = 10, savePredictions = TRUE)
nb_model_cv <- train(stroke ~ ., data = selected_data, method = "naive_bayes", trControl = ctrl)
accuracy_cv <- max(nb_model_cv$results$Accuracy)
cat("\nApproach 2 - 10-fold Cross-validation:\n")
cat("Accuracy:", accuracy_cv, "\n")
cat("Confusion Matrix (average over folds):\n")
print(confusionMatrix(nb_model_cv$pred$pred, nb_model_cv$pred$obs))
conf_matrix <- confusionMatrix(nb_pred, test_data$stroke)
recall <- conf_matrix$byClass["Sensitivity"]
precision <- conf_matrix$byClass["Pos Pred Value"]
f_measure <- 2 * (precision * recall) / (precision + recall)
cat("Confusion Matrix:\n")
print(conf_matrix)
cat("\nRecall:", recall, "\n")
cat("Precision:", precision, "\n")
cat("F-measure:", f_measure, "\n")
ctrl <- trainControl(method = "cv", number = 10, savePredictions = TRUE)
nb_model_cv <- train(stroke ~ ., data = selected_data, method = "naive_bayes", trControl = ctrl)
# Extract accuracy from cross-validation results
accuracy_cv <- max(nb_model_cv$results$Accuracy)
cat("\nApproach 2 - 10-fold Cross-validation:\n")
cat("Accuracy:", accuracy_cv, "\n")
cat("Confusion Matrix (average over folds):\n")
print(confusionMatrix(nb_model_cv$pred$pred, nb_model_cv$pred$obs))
# Approach 2: 10-fold Cross-validation
ctrl <- trainControl(method = "cv", number = 511, savePredictions = TRUE)
nb_model_cv <- train(stroke ~ ., data = selected_data, method = "naive_bayes", trControl = ctrl)
# Extract accuracy from cross-validation results
accuracy_cv <- max(nb_model_cv$results$Accuracy)
cat("\nApproach 2 - 10-fold Cross-validation:\n")
cat("Accuracy:", accuracy_cv, "\n")
cat("Confusion Matrix (average over folds):\n")
print(confusionMatrix(nb_model_cv$pred$pred, nb_model_cv$pred$obs))
conf_matrix <- confusionMatrix(nb_pred, test_data$stroke)
# Extract Recall, Precision, and F-measure
recall <- conf_matrix$byClass["Sensitivity"]
precision <- conf_matrix$byClass["Pos Pred Value"]
f_measure <- 2 * (precision * recall) / (precision + recall)
cat("Confusion Matrix:\n")
print(conf_matrix)
cat("\nRecall:", recall, "\n")
cat("Precision:", precision, "\n")
cat("F-measure:", f_measure, "\n")
# Approach 2: 10-fold Cross-validation
ctrl <- trainControl(method = "cv", number = 10, savePredictions = TRUE)
nb_model_cv <- train(stroke ~ ., data = selected_data, method = "naive_bayes", trControl = ctrl)
# Extract accuracy from cross-validation results
accuracy_cv <- max(nb_model_cv$results$Accuracy)
cat("\nApproach 2 - 10-fold Cross-validation:\n")
cat("Accuracy:", accuracy_cv, "\n")
cat("Confusion Matrix (average over folds):\n")
print(confusionMatrix(nb_model_cv$pred$pred, nb_model_cv$pred$obs))
conf_matrix <- confusionMatrix(nb_pred, test_data$stroke)
nb_model_split <- naiveBayes(stroke ~ ., data = train_data)
nb_pred_split <- predict(nb_model_split, newdata = test_data)
conf_matrix_split <- confusionMatrix(nb_pred_split, test_data$stroke)
accuracy_split <- conf_matrix_split$overall["Accuracy"]
cat("Approach 1 - Data Splitting:\n")
cat("Accuracy:", accuracy_split, "\n")
cat("Confusion Matrix:\n")
print(conf_matrix_split)
# install.packages(c("caret", "e1071"))
library(caret)
library(e1071)
selected_attributes <- c("age", "hypertension", "heart_disease", "ever_married",
"work_type", "Residence_type", "bmi", "smoking_status", "stroke")
selected_data <- stroke_ds[, selected_attributes]
set.seed(123)
train_indices <- createDataPartition(selected_data$stroke, p = 0.7, list = FALSE)
train_data <- selected_data[train_indices, ]
test_data <- selected_data[-train_indices, ]
for (col in c("hypertension", "heart_disease", "ever_married", "work_type", "Residence_type", "smoking_status", "stroke")) {
train_data[[col]] <- as.factor(train_data[[col]])
test_data[[col]] <- factor(test_data[[col]], levels = levels(train_data[[col]]))
}
nb_model_split <- naiveBayes(stroke ~ ., data = train_data)
nb_pred_split <- predict(nb_model_split, newdata = test_data)
conf_matrix_split <- confusionMatrix(nb_pred_split, test_data$stroke)
accuracy_split <- conf_matrix_split$overall["Accuracy"]
cat("Approach 1 - Data Splitting:\n")
cat("Accuracy:", accuracy_split, "\n")
cat("Confusion Matrix:\n")
print(conf_matrix_split)
# install.packages(c("caret", "e1071"))
library(caret)
library(e1071)
selected_attributes <- c("age", "hypertension", "heart_disease", "ever_married",
"work_type", "Residence_type", "bmi", "smoking_status", "stroke")
selected_data <- stroke_ds[, selected_attributes]
set.seed(123)
train_indices <- createDataPartition(selected_data$stroke, p = 0.7, list = FALSE)
train_data <- selected_data[train_indices, ]
test_data <- selected_data[-train_indices, ]
for (col in c("hypertension", "heart_disease", "ever_married", "work_type", "Residence_type", "smoking_status", "stroke")) {
train_data[[col]] <- as.factor(train_data[[col]])
test_data[[col]] <- factor(test_data[[col]], levels = levels(train_data[[col]]))
}
nb_model_split <- naiveBayes(stroke ~ ., data = train_data)
nb_pred_split <- predict(nb_model_split, newdata = test_data)
conf_matrix_split <- confusionMatrix(nb_pred_split, test_data$stroke)
accuracy_split <- conf_matrix_split$overall["Accuracy"]
cat("Approach 1 - Data Splitting:\n")
cat("Accuracy:", accuracy_split, "\n")
cat("Confusion Matrix:\n")
print(conf_matrix_split)
ctrl <- trainControl(method = "cv", number = 10, savePredictions = TRUE)
nb_model_cv <- train(stroke ~ ., data = selected_data, method = "naive_bayes", trControl = ctrl)
accuracy_cv <- max(nb_model_cv$results$Accuracy)
cat("\nApproach 2 - 10-fold Cross-validation:\n")
cat("Accuracy:", accuracy_cv, "\n")
cat("Confusion Matrix (average over folds):\n")
print(confusionMatrix(nb_model_cv$pred$pred, nb_model_cv$pred$obs))
conf_matrix <- confusionMatrix(nb_pred, test_data$stroke)
recall <- conf_matrix$byClass["Sensitivity"]
precision <- conf_matrix$byClass["Pos Pred Value"]
f_measure <- 2 * (precision * recall) / (precision + recall)
cat("Confusion Matrix:\n")
print(conf_matrix)
cat("\nRecall:", recall, "\n")
cat("Precision:", precision, "\n")
cat("F-measure:", f_measure, "\n")
ctrl <- trainControl(method = "cv", number = 10, savePredictions = TRUE)
nb_model_cv <- train(stroke ~ ., data = selected_data, method = "naive_bayes", trControl = ctrl)
accuracy_cv <- max(nb_model_cv$results$Accuracy)
cat("\nApproach 2 - 10-fold Cross-validation:\n")
cat("Accuracy:", accuracy_cv, "\n")
cat("Confusion Matrix (average over folds):\n")
print(confusionMatrix(nb_model_cv$pred$pred, nb_model_cv$pred$obs))
conf_matrix <- confusionMatrix(nb_pred, test_data$stroke)
recall <- conf_matrix$byClass["Sensitivity"]
precision <- conf_matrix$byClass["Pos Pred Value"]
f_measure <- 2 * (precision * recall) / (precision + recall)
cat("Confusion Matrix:\n")
print(conf_matrix)
cat("\nRecall:", recall, "\n")
cat("Precision:", precision, "\n")
cat("F-measure:", f_measure, "\n")
ctrl <- trainControl(method = "cv", number = 10, savePredictions = TRUE)
nb_model_cv <- train(stroke ~ ., data = selected_data, method = "naive_bayes", trControl = ctrl)
accuracy_cv <- max(nb_model_cv$results$Accuracy)
cat("\nApproach 2 - 10-fold Cross-validation:\n")
cat("Accuracy:", accuracy_cv, "\n")
cat("Confusion Matrix (average over folds):\n")
print(confusionMatrix(nb_model_cv$pred$pred, nb_model_cv$pred$obs))
conf_matrix <- confusionMatrix(nb_pred, test_data$stroke)
recall <- conf_matrix$byClass["Sensitivity"]
precision <- conf_matrix$byClass["Pos Pred Value"]
f_measure <- 2 * (precision * recall) / (precision + recall)
cat("Confusion Matrix:\n")
print(conf_matrix)
cat("\nRecall:", recall, "\n")
cat("Precision:", precision, "\n")
cat("F-measure:", f_measure, "\n")
# install.packages(c("caret", "e1071"))
library(caret)
library(e1071)
selected_attributes <- c("age", "hypertension", "heart_disease", "ever_married",
"work_type", "Residence_type", "bmi", "smoking_status", "stroke")
selected_data <- stroke_ds[, selected_attributes]
set.seed(123)
train_indices <- createDataPartition(selected_data$stroke, p = 0.7, list = FALSE)
train_data <- selected_data[train_indices, ]
test_data <- selected_data[-train_indices, ]
for (col in c("hypertension", "heart_disease", "ever_married", "work_type", "Residence_type", "smoking_status", "stroke")) {
train_data[[col]] <- as.factor(train_data[[col]])
test_data[[col]] <- factor(test_data[[col]], levels = levels(train_data[[col]]))
}
nb_model_split <- naiveBayes(stroke ~ ., data = train_data)
nb_pred_split <- predict(nb_model_split, newdata = test_data)
conf_matrix_split <- confusionMatrix(nb_pred_split, test_data$stroke)
accuracy_split <- conf_matrix_split$overall["Accuracy"]
cat("Approach 1 - Data Splitting:\n")
cat("Accuracy:", accuracy_split, "\n")
cat("Confusion Matrix:\n")
print(conf_matrix_split)
# install.packages(c("caret", "e1071"))
library(caret)
library(e1071)
selected_attributes <- c("age", "hypertension", "heart_disease", "ever_married",
"work_type", "Residence_type", "bmi", "smoking_status", "stroke")
selected_data <- stroke_ds[, selected_attributes]
set.seed(123)
train_indices <- createDataPartition(selected_data$stroke, p = 0.7, list = FALSE)
train_data <- selected_data[train_indices, ]
test_data <- selected_data[-train_indices, ]
for (col in c("hypertension", "heart_disease", "ever_married", "work_type", "Residence_type", "smoking_status", "stroke")) {
train_data[[col]] <- as.factor(train_data[[col]])
test_data[[col]] <- factor(test_data[[col]], levels = levels(train_data[[col]]))
}
nb_model_split <- naiveBayes(stroke ~ ., data = train_data)
nb_pred_split <- predict(nb_model_split, newdata = test_data)
conf_matrix_split <- confusionMatrix(nb_pred_split, test_data$stroke)
accuracy_split <- conf_matrix_split$overall["Accuracy"]
cat("Approach 1 - Data Splitting:\n")
cat("Accuracy:", accuracy_split, "\n")
cat("Confusion Matrix:\n")
print(conf_matrix_split)
ctrl <- trainControl(method = "cv", number = 10, savePredictions = TRUE)
nb_model_cv <- train(stroke ~ ., data = selected_data, method = "naive_bayes", trControl = ctrl)
accuracy_cv <- max(nb_model_cv$results$Accuracy)
cat("\nApproach 2 - 10-fold Cross-validation:\n")
cat("Accuracy:", accuracy_cv, "\n")
cat("Confusion Matrix (average over folds):\n")
print(confusionMatrix(nb_model_cv$pred$pred, nb_model_cv$pred$obs))
conf_matrix <- confusionMatrix(nb_pred, test_data$stroke)
recall <- conf_matrix$byClass["Sensitivity"]
precision <- conf_matrix$byClass["Pos Pred Value"]
f_measure <- 2 * (precision * recall) / (precision + recall)
cat("Confusion Matrix:\n")
print(conf_matrix)
cat("\nRecall:", recall, "\n")
cat("Precision:", precision, "\n")
cat("F-measure:", f_measure, "\n")
ctrl <- trainControl(method = "cv", number = 10, savePredictions = TRUE)
nb_model_cv <- train(stroke ~ ., data = selected_data, method = "naive_bayes", trControl = ctrl)
accuracy_cv <- max(nb_model_cv$results$Accuracy)
cat("\nApproach 2 - 10-fold Cross-validation:\n")
cat("Accuracy:", accuracy_cv, "\n")
cat("Confusion Matrix (average over folds):\n")
print(confusionMatrix(nb_model_cv$pred$pred, nb_model_cv$pred$obs))
ctrl <- trainControl(method = "cv", number = 10, savePredictions = TRUE)
nb_model_cv <- train(stroke ~ ., data = selected_data, method = "naive_bayes", trControl = ctrl)
accuracy_cv <- max(nb_model_cv$results$Accuracy)
cat("\nApproach 2 - 10-fold Cross-validation:\n")
cat("Accuracy:", accuracy_cv, "\n")
cat("Confusion Matrix (average over folds):\n")
print(confusionMatrix(nb_model_cv$pred$pred, nb_model_cv$pred$obs))
conf_matrix <- confusionMatrix(nb_pred, test_data$stroke)
recall <- conf_matrix$byClass["Sensitivity"]
precision <- conf_matrix$byClass["Pos Pred Value"]
f_measure <- 2 * (precision * recall) / (precision + recall)
cat("Confusion Matrix:\n")
print(conf_matrix)
cat("\nRecall:", recall, "\n")
cat("Precision:", precision, "\n")
cat("F-measure:", f_measure, "\n")
conf_matrix <- confusionMatrix(nb_pred, test_data$stroke)
recall <- conf_matrix$byClass["Sensitivity"]
precision <- conf_matrix$byClass["Pos Pred Value"]
f_measure <- 2 * (precision * recall) / (precision + recall)
cat("Confusion Matrix:\n")
print(conf_matrix)
cat("\nRecall:", recall, "\n")
cat("Precision:", precision, "\n")
cat("F-measure:", f_measure, "\n")
ctrl <- trainControl(method = "cv", number = 10, savePredictions = TRUE)
nb_model_cv <- train(stroke ~ ., data = selected_data, method = "naive_bayes", trControl = ctrl)
ctrl <- trainControl(method = "cv", number = 10, savePredictions = TRUE)
nb_model_cv <- train(stroke ~ ., data = selected_data, method = "naive_bayes", trControl = ctrl)
accuracy_cv <- max(nb_model_cv$results$Accuracy)
cat("\nApproach 2 - 10-fold Cross-validation:\n")
cat("Accuracy:", accuracy_cv, "\n")
cat("Confusion Matrix (average over folds):\n")
print(confusionMatrix(nb_model_cv$pred$pred, nb_model_cv$pred$obs))
